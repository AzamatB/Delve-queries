/// Self-Join Practice Problems
// #3: Retained Users Per Month
def logins = {
   (1  , 2018-07-01);
   (234, 2018-07-02);
   (3  , 2018-08-23);
   (1  , 2018-08-29);
   (1  , 2018-08-31);
   (2  , 2018-08-02);
   (2  , 2018-09-11);
   (4  , 2018-08-21);
   (4  , 2018-09-13);
   (234, 2018-10-04);
   (4  , 2018-10-19);
   (5  , 2019-12-10);
   (5  , 2020-01-22);
}
// Part 1
def logs(year, month, id) = ∃(date : logins(id, date) ∧ year = date_year[date] ∧ month = date_month[date])
// all user ids that logged in this and the previous month
def ret_logins(year, month, id) = (logs(year, month, id) ∧ logs(year, month-1, id)) ∨
                                  (month = 1 ∧ logs(year, month, id) ∧ logs(year-1, 12, id))
def retained_users = year, month : count[id : ret_logins(year, month, id)]
// all month that are absent from ret_logins relation, i.e. have 0 user retention
def retained_users(year, month, 0) = logs(year, month, _) ∧ ¬ret_logins(year, month, _)

// Part 2
def churn_logins(year, month, id) = logs(year, month, _) ∧
                                    ((¬logs(year, month, id) ∧ logs(year, month-1, id)) ∨
                                     (month = 1 ∧ ¬logs(year, month, id) ∧ logs(year-1, 12, id)))

def churned_users = year, month : count[id : churn_logins(year, month, id)]
// all month that are absent from churn_logins relation, i.e. have 0 user churning
def churned_users(year, month, 0) = logs(year, month, _) ∧ ¬churn_logins(year, month, _)

// Part 3
def react_logins(year, month, id) = logs(year, month, id) ∧ ∃(yr, mo : churn_logins(yr, mo, id) ∧ ((year > yr) ∨ (year = yr ∧ month > mo)))
